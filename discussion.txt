CS and Data Structures Assessment 1


Part 1: Discussion Questions


Runtime

1. When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?

    To figure out whether the box of animal crackers contains an elephant, the runtime would be O(n).  This is because we would need to pick a cracker out of the box one by one and check if it is an elephant.  We would keep doing this until we find the first cracker that is an elephant.  If the box contained 35 crackers, it would take at most 35 checks to find an elephant if we consider the worst case scenario.

2. Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity:

    O(1)
    O(log n)
    O(n)
    O(n log n)
    O(n^2)
    O(2^n)
    O(n!)


Stacks and Queues

1. In the following cases, would a stack or queue be a more appropriate data structure?

    1. The process of loading and unloading pallets onto a flatbed truck

        Stack.  

    2. Putting bottle caps on bottles of beer as they roll down an assembly line

        Queue.  

    3. Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)

        Stack. 

2. Describe two more situations where a queue would be an appropriate data structure.

    1. A line to check out in a store.  The first person in line would be the first to get checked out.

    2. A one lane road, the first car to enter the one lane road is the first to get out.

3. Describe two more situations where a stack would be an appropriate data structure.

    1. Stacking plates, placing in sink, and washing the top one on the stack first.

    2. Pez dispenser, the last pez candy loaded is the first one dispensed.


Linked Lists

1. Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)

    The nodes in the list are the 3 pairs of boxes; apple, berry, and cherry nodes.  Each node has a data and next attribute.

    The data within each node are the text in quotes; 'Apple', 'Berry', and 'Cherry'.

    The head is pointing to the first node in the linked list, which is the Apple node.

    The linked list diagram does not have a tail attribute.  If it did, it would be pointing to the Cherry node.

2. What’s the difference between doubly- and singly-linked lists?

    A singly-linked list contains nodes that only has reference to the next node, whereas the doubly-linked list has reference to the previous node in addition to the next node.

3. Why is it faster to append to a linked list if we keep track of the tail as an attribute?

    If the linked list doesn't have a tail attribute, to append to the end of a list, we would have to traverse starting from the head to each node of the linked list.  However, if we have a tail attribute that points to the last node, we wouldn't have to traverse the list.


Trees

1. Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burritos (starting at food)? (Assume nodes are enqueued in left-to-right order.) Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.

    Food -> Italian -> Indian -> Mexican -> lasagna -> pizza -> tikka masala -> saag -> burritos

2. Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? (Assume nodes are pushed in left-to-right order.) Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.

    Food -> Mexican -> enchiladas -> tacos -> burritos -> Indian -> saag -> tikka masala -> Italian -> pizza -> Sicilian -> New York-style -> Chicago-Style

3. How is a binary search tree different from other trees?

    Each node in a binary search tree has a left and right node and is arranged in a sorted order.  The middle item in an ordered list is the root of the tree.  The left child of a root is less than the root, and the right child of a root is greater than the root.  The order is the same for subtrees.  It allows for faster search times because with every choice/movement, the number of choices are reduced by half. 




